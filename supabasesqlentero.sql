-- =================================================================
-- SCRIPT DE RECONSTRUCCIÓN FINAL Y CORREGIDO
-- Corrige el error de sintaxis "TIMESTAMPTZ WITH TIME ZONE".
-- =================================================================

-- PASO 1: Eliminar las tablas antiguas para asegurar un inicio limpio.
DROP TABLE IF EXISTS public.evaluaciones CASCADE;
DROP TABLE IF EXISTS public.candidatos CASCADE;
DROP TABLE IF EXISTS public.avisos CASCADE;
DROP TABLE IF EXISTS public.carpetas CASCADE;

-- PASO 2: Crear la tabla `avisos` con la sintaxis de fecha corregida.
CREATE TABLE public.carpetas (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    nombre TEXT NOT NULL,
    user_id UUID DEFAULT auth.uid(),
    parent_id BIGINT REFERENCES public.carpetas(id) ON DELETE CASCADE
);
COMMENT ON TABLE public.carpetas IS 'Almacena las carpetas para organizar candidatos en la Base de Talentos.';


CREATE TABLE public.avisos (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMPTZ DEFAULT NOW()3 NOT NULL, -- CORREGIDO
    titulo TEXT NOT NULL,
    descripcion TEXT,
    max_cv INT,
    valido_hasta DATE,
    condiciones_necesarias TEXT[],
    condiciones_deseables TEXT[],
    user_id UUID DEFAULT auth.uid()
);
COMMENT ON TABLE public.avisos IS 'Almacena los avisos o búsquedas laborales creadas.';

-- PASO 3: Crear la tabla `candidatos` con la sintaxis de fecha corregida.
CREATE TABLE public.candidatos (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL, -- CORREGIDO
    aviso_id BIGINT REFERENCES public.avisos(id) ON DELETE SET NULL,
    carpeta_id BIGINT REFERENCES public.carpetas(id) ON DELETE SET NULL,
    nombre_archivo TEXT,
    base64 TEXT,
    texto_cv TEXT,
    nombre_candidato TEXT,
    email TEXT,
    telefono TEXT,
    resumen TEXT,
    calificacion INT,
    notas TEXT
);
COMMENT ON TABLE public.candidatos IS 'Almacena la información y CV de los candidatos.';

-- PASO 4: Crear la tabla `evaluaciones`.
CREATE TABLE public.evaluaciones (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    candidato_id BIGINT NOT NULL REFERENCES public.candidatos(id) ON DELETE CASCADE,
    aviso_id BIGINT NOT NULL REFERENCES public.avisos(id) ON DELETE CASCADE,
    calificacion INT NOT NULL CHECK (calificacion >= 0 AND calificacion <= 100),
    justificacion TEXT,
    fecha_evaluacion TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    CONSTRAINT unique_candidato_aviso UNIQUE (candidato_id, aviso_id)
);
COMMENT ON TABLE public.evaluaciones IS 'Almacena la calificación de un candidato para un aviso específico.';

-- PASO 5: Habilitar Row Level Security (RLS) en todas las tablas.
ALTER TABLE public.avisos ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.candidatos ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.evaluaciones ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.carpetas ENABLE ROW LEVEL SECURITY;

-- PASO 6: Aplicar políticas de acceso para el rol `anon`.

-- Políticas para `avisos`:
CREATE POLICY "Permitir lectura pública de avisos" ON public.avisos FOR SELECT TO anon USING (true);
CREATE POLICY "Permitir inserción de nuevos avisos" ON public.avisos FOR INSERT TO anon WITH CHECK (true);

-- Políticas para `candidatos`:
CREATE POLICY "Permitir inserción pública de candidatos" ON public.candidatos FOR INSERT TO anon WITH CHECK (true);
CREATE POLICY "Permitir lectura de candidatos para el panel" ON public.candidatos FOR SELECT TO anon USING (true);
CREATE POLICY "Permitir actualización de candidatos desde el panel" ON public.candidatos FOR UPDATE TO anon USING (true);

-- Políticas para `evaluaciones`:
CREATE POLICY "Permitir lectura pública de evaluaciones" ON public.evaluaciones FOR SELECT TO anon USING (true);
CREATE POLICY "Permitir inserción pública de evaluaciones" ON public.evaluaciones FOR INSERT TO anon WITH CHECK (true);

-- Políticas para `carpetas`:
CREATE POLICY "Permitir lectura de carpetas" ON public.carpetas FOR SELECT TO anon USING (true);
CREATE POLICY "Permitir inserción de carpetas" ON public.carpetas FOR INSERT TO anon WITH CHECK (true);
CREATE POLICY "Permitir actualización de carpetas" ON public.carpetas FOR UPDATE TO anon USING (true);
CREATE POLICY "Permitir eliminación de carpetas" ON public.carpetas FOR DELETE TO anon USING (true);
